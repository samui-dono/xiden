

@section{In-Memory Archaeologist}

@defmodule[xiden/archaeology/memory]

@defproc[(make-memory-archaeologist [contents hash?]) archaeologist/c]{
Returns an @tech{archaeologist} that searches @racket[contents] for
artifacts. @racket[contents] is a nested hash table keyed first by
provider names, then package names, then edition names, then both
revision names and numbers as shown.

@racketblock[
(define providers (memory-catalog-contents cat))
(define packages (hash-ref providers "example.com"))
(define editions (hash-ref packages "rpg"))
(define revisions (hash-ref editions "directors-cut"))
(artifact? (hash-ref revisions 0))
(artifact? (hash-ref revisions 28))
(artifact? (hash-ref revisions (hash-ref revisions "re-release")))
]

As indicated by the last line, each hash table may map keys to other
keys in the same table.

e.g.

@racketblock[
(hash-ref providers (hash-ref providers "alias.example.com"))
]

The archaeologist will recursively resolve keys in this way until it
encounters a value of a type not used as a key. If the search yields
cyclic keys, this function will not terminate.
}


@subsection{Filesystem Archaeologist}

@defmodule[xiden/catalog/filesystem]

@defproc[(make-filesystem-archaeologist
          [directory-path complete-path?]
          [chf md-algorithm/c])
         archaeologist/c]{
Returns an @tech{archaeologist} that searches directories for
@tech{artifacts} in the form of files. The function assumes that
digests are produced using @racket[chf].

The following invariants must hold for all files.

@itemlist[
@item{
If @racket[(build-path directory-path P K E (~a N "." chf))] exists,
it is a readable file containing the unencoded digest for the
corresponding package definition file.
}

@item{
If @racket[(build-path directory-path P K E (~a N "." chf ".sig"))]
exists, it is a readable file containing the unencoded bytes for a
signature. The signature must be computed from the corresponding
digest.
}
]

For a given provider @racketid[P], package name @racketid[K], edition
@racketid[E], revision name @racketid[A], and revision number
@racketid[N] from a @racket[package-definition-request], the following
invariants must hold:

@itemlist[

@item{
If @racket[(build-path directory-path P "public-key")] exists, it must
be a readable file containing the public key for @racketid[P].
@bold{Corollary:} @racketid[K] must not be @racket[equal?] to
@racket{public-key}.
}

@item{
@racket[file-name-string?] returns @racket[#t] for @racketid[P],
@racketid[K], @racketid[E], @racketid[A], and @racketid[N].
}

@item{
If @racket[(build-path directory-path P K E N)] exists, it is a
readable file containing a @tech{package definition}.
}

@item{
If @racket[(build-path directory-path P K E A)] exists, it must be a
readable link pointing to exactly @racketid[N]. The link's name must
be a @tech{revision name} from the corresponding package definition
file (Digest and signature links are not required).
}

]

This example directory structure meets all invariants.

@verbatim{
<directory-path>
├── alice
│   ├── default -> renderer
│   ├── public-key
│   ├── raw-input
│   │   └── default
│   │       ├── 0
│   │       ├── 0.sha3-384
│   │       ├── 0.sha3-384.sig
│   │       ├── 1
│   │       ├── 1.sha3-384
│   │       ├── 1.sha3-384.sig
│   │       ├── 5
│   │       ├── 5.sha3-384
│   │       ├── 5.sha3-384.sig
│   │       ├── open-beta -> 5
│   │       └── xbox-controller-support -> 1
│   └── renderer
│       ├── default -> vulkan
│       ├── directx
│       │   ├── 0
│       │   ├── 0.sha3-384
│       │   └── 0.sha3-384.sig
│       └── vulkan
│           ├── 0
│           ├── 0.sha3-384
│           ├── 0.sha3-384.sig
│           └── default -> 0
├── default -> alice
└── john
    ├── calculator
    │   ├── default
    │   │   ├── 0
    │   │   ├── 0.sha3-384
    │   │   ├── 0.sha3-384.sig
    │   │   ├── 1
    │   │   ├── 1.sha3-384
    │   │   ├── 1.sha3-384.sig
    │   │   ├── 2
    │   │   ├── 2.sha3-384
    │   │   ├── 2.sha3-384.sig
    │   │   ├── initial -> 0
    │   │   └── post-feedback -> 2
    │   └── scientific
    │       ├── 0
    │       ├── 0.sha3-384
    │       ├── 0.sha3-384.sig
    │       ├── 1
    │       ├── 1.sha3-384
    │       ├── 1.sha3-384.sig
    │       └── zero-day-patch -> 1
    ├── calendar
    │   ├── chinese
    │   │   ├── 0
    │   │   ├── 0.sha3-384
    │   │   └── 0.sha3-384.sig
    │   └── gregorian
    │       ├── 0
    │       ├── 0.sha3-384
    │       └── 0.sha3-384.sig
    └── public-key
}

In this example, the providers are Alice, a video game developer, and
John, an office application developer.

There is a gap in revision numbers in Alice's @tt{raw-input} package.
Despite missing information, the function will return the latest
available match for queries like @racket[(needs-definition
"alice:raw-input:::open-beta")].

Finally, each directory may contain a symlink named after a string one
could use in a package query. You can leverage this to support getting
the latest available version using queries like
@litchar{alice:raw-input}.
}

@subsection{HTTP Catalog}

@defmodule[xiden/catalog/http]

@defstruct*[http-catalog ([base-url url-variant?]
                          [package-query-defaults package-query-defaults/c])]{
A catalog that handles revision numbers and package definitions as an
HTTP client. HTTPS is enabled if @racket[base-url] uses the
@racket{https} scheme, and will use the latest TLS or SSL
implementation available in the Racket installation.

The catalog issues @tt{GET} requests w.r.t. @racket[base-url]. Path
elements are appended to @racket[base-url]'s path. Query elements are
set in @racket[base-url]'s query string, overwriting values for
existing keys. The invariant list below shows the used keys.

For a given package definition with a provider @litchar{P}, a package
name @litchar{K}, an edition @litchar{E}, a revision name @litchar{A},
a revision number @litchar{N}, and a cryptographic hash function name
@tt{CHF}, the following invariants must hold for the HTTP server.

@margin-note{The minimal interface used by @racket[http-catalog] is
not friendly to marketing interests because it only creates download
dialogs in a user's browser. If you intend to create an HTTP server
compatible with @racket[http-catalog], then consider hosting a
compatible interface aside from the pages optimized for browsing and
discovery.}

@itemlist[

@item{All responses use @litchar{Content-Type: application/octet-stream}.}

@item{
@litchar{GET /P/K/E/N} or @litchar{GET /P/K/E/A} yields a package
definition.
}

@item{
@litchar{GET /P/public-key} yields a public key.
}

@item{
@litchar{GET /P/K/E/N.CHF} yields a digest's raw bytes.
}

@item{
@litchar{GET /P/K/E/N.CHF.sig} yields the signature bytes for a digest.
}

@item{
@litchar{GET /select?provider=P&pacakage=K&edition=E&revision-min=MIN&revision-max=MAX}
yields a @racket[(read)]able Racket value representing either a
@tech{revision number}, or an implementation-specific value that a
human can inspect to understand why a revision number cannot be
returned. Up to @racket[512] bytes of the response body will be
@racket[read] as untrusted input using
@racket[call-with-default-reading-parameterization].

@litchar{MIN} and @litchar{MAX} are @tech{revision numbers} that form
an inclusive interval.

The server must respond with a @racket[400] status if
@racket[string->number] fails for @litchar{MIN} or @litchar{MAX}, or
if @litchar[MIN] is greater than @litchar{MAX}. The server must
respond with a semantically appropriate status code if it cannot
select a revision number within @litchar|{{MIN ... MAX}}|, and both
boundaries are valid.
}

]
}
